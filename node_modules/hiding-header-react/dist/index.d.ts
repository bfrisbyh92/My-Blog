import { HidingHeaderOptions } from 'hiding-header';
import { ElementType, HTMLAttributes, ReactNode } from 'react';
export declare const useHidingHeader: () => {
    run: () => void;
    pause: () => void;
    isPaused: () => boolean;
    isHome: () => boolean;
    reveal: () => void;
    hide: () => void;
    getHeight: () => number;
    getVisibleHeight: () => number;
} | undefined;
export declare const useRunHidingHeader: () => (() => void) | undefined;
export declare const usePauseHidingHeader: () => (() => void) | undefined;
export declare const useRevealHidingHeader: () => (() => void) | undefined;
export declare const useHideHidingHeader: () => (() => void) | undefined;
export interface HidingHeaderProps {
    children?: ReactNode;
    className?: HTMLAttributes<HTMLDivElement>['className'];
    innerClassName?: HTMLAttributes<HTMLDivElement>['className'];
    component?: ElementType;
    heightPropertyName?: HidingHeaderOptions['heightPropertyName'];
    boundsHeightPropertyName?: HidingHeaderOptions['boundsHeightPropertyName'];
    animationOffsetPropertyName?: HidingHeaderOptions['animationOffsetPropertyName'];
    snap?: HidingHeaderOptions['snap'];
    onHeightChange?: HidingHeaderOptions['onHeightChange'];
    onVisibleHeightChange?: HidingHeaderOptions['onVisibleHeightChange'];
    onHomeChange?: HidingHeaderOptions['onHomeChange'];
}
export declare const HidingHeader: React.FunctionComponent<HidingHeaderProps>;
